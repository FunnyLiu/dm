#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires */

const program = require('commander')
const { build } = require('../dist/index')
const { Context } = require('../dist/impl/context.impl')
const { parseOpts } = require('../dist/impl/options.impl')

program
  .name('dm build')
  // 开发相关
  .option('-w, --watch', '启动文件监听')
  .option('-p, --page <value>', '单页抽取') // <value>表示当有app参数时必须带值，[value]表示可选，不填时command.app == true
  .option('--tabbar', '保留tabbar及相关页面')
  // 通用
  .option('-a, --app <value>', '指定小程序')
  .option('-t, --type <value>', '指定类型：xcx、h5、react')
  .option('-o, --open', '启动开发者工具')
  .option('--wxcli <value>', '小程序开发者工具cli路径')
  .option('-i, --include <value>', '需要额外添加的目录')
  .option('-d, --output.build <value>', '指定生成文件目录')
  .option('--cwd <value>', '执行命令目录')
  .option('--debug', '输出debug信息')
  // 发布相关
  .option('-r, --release', '发布')
  .option('-v, --version <value>', '版本号')
  .option('--dev', '内测版本号')
  .option('--js-tree-shaking', '删除未引用函数')
  .option('--css-tree-shaking', '删除未引用样式')

const cwdIdx = process.argv.findIndex(val => val === '--cwd');
const cwdValueIdx = cwdIdx === -1 ? -1 : cwdIdx + 1;
// 动态注册命令参数
Context.getPlugins(process.argv[cwdValueIdx] || process.cwd(), (Clazz) => {
  if (Clazz.cmdHooks && Clazz.cmdHooks.build) {
    //对应hooks执行 
    Clazz.cmdHooks.build.forEach(args => {
      program.option(...args)
    });
  }
})

program.parse(process.argv);

build(parseOpts(program))
